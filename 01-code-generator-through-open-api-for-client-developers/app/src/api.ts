/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * The second version of API
 * Describe the fundamental concept of DFD(Documentation-First Developmemt).
 *
 * OpenAPI spec version: 1.0.0
 * Contact: 0417taehyun@gmail.com
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "/".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name = "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface Book
 */
export interface Book {
    /**
     * Name of book.
     * @type {string}
     * @memberof Book
     */
    name: string;
}
/**
 * BookApi - fetch parameter creator
 * @export
 */
export const BookApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Description       1. Get all books.  To-do      1. Serach by name with query parameter.
         * @summary Get Books
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBooksBooksGet(options: any = {}): FetchArgs {
            const localVarPath = `/books`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BookApi - functional programming interface
 * @export
 */
export const BookApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Description       1. Get all books.  To-do      1. Serach by name with query parameter.
         * @summary Get Books
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBooksBooksGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Book>> {
            const localVarFetchArgs = BookApiFetchParamCreator(configuration).getBooksBooksGet(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * BookApi - factory interface
 * @export
 */
export const BookApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Description       1. Get all books.  To-do      1. Serach by name with query parameter.
         * @summary Get Books
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBooksBooksGet(options?: any) {
            return BookApiFp(configuration).getBooksBooksGet(options)(fetch, basePath);
        },
    };
};

/**
 * BookApi - object-oriented interface
 * @export
 * @class BookApi
 * @extends {BaseAPI}
 */
export class BookApi extends BaseAPI {
    /**
     * Description       1. Get all books.  To-do      1. Serach by name with query parameter.
     * @summary Get Books
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookApi
     */
    public getBooksBooksGet(options?: any) {
        return BookApiFp(this.configuration).getBooksBooksGet(options)(this.fetch, this.basePath);
    }

}
